{
  "contract_name": "fuzion_market",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Cycles the token denomination charged in fees (JUNO <> USDC) </br> This can be called by anyone, but can only be called once every 100,800 blocks </br> (approx. 1 week assuming 6 sec blocks)",
        "type": "object",
        "required": [
          "fee_cycle"
        ],
        "properties": {
          "fee_cycle": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive_nft"
        ],
        "properties": {
          "receive_nft": {
            "$ref": "#/definitions/Cw721ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create Listing with Native/cw20",
        "type": "object",
        "required": [
          "create_listing"
        ],
        "properties": {
          "create_listing": {
            "type": "object",
            "required": [
              "create_msg",
              "listing_id"
            ],
            "properties": {
              "create_msg": {
                "$ref": "#/definitions/CreateListingMsg"
              },
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adding native/cw20 tokens to listing",
        "type": "object",
        "required": [
          "add_to_listing"
        ],
        "properties": {
          "add_to_listing": {
            "type": "object",
            "required": [
              "listing_id"
            ],
            "properties": {
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Change ask of listing",
        "type": "object",
        "required": [
          "change_ask"
        ],
        "properties": {
          "change_ask": {
            "type": "object",
            "required": [
              "listing_id",
              "new_ask"
            ],
            "properties": {
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "new_ask": {
                "$ref": "#/definitions/GenericBalance"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Makes Listing available for purchase & sets expiration time",
        "type": "object",
        "required": [
          "finalize"
        ],
        "properties": {
          "finalize": {
            "type": "object",
            "required": [
              "listing_id",
              "seconds"
            ],
            "properties": {
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "seconds": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Callable if listing has not been finalized or is expired",
        "type": "object",
        "required": [
          "delete_listing"
        ],
        "properties": {
          "delete_listing": {
            "type": "object",
            "required": [
              "listing_id"
            ],
            "properties": {
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create Bucket with native/cw20",
        "type": "object",
        "required": [
          "create_bucket"
        ],
        "properties": {
          "create_bucket": {
            "type": "object",
            "required": [
              "bucket_id"
            ],
            "properties": {
              "bucket_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Add Native/cw20 to bucket",
        "type": "object",
        "required": [
          "add_to_bucket"
        ],
        "properties": {
          "add_to_bucket": {
            "type": "object",
            "required": [
              "bucket_id"
            ],
            "properties": {
              "bucket_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw bucket",
        "type": "object",
        "required": [
          "remove_bucket"
        ],
        "properties": {
          "remove_bucket": {
            "type": "object",
            "required": [
              "bucket_id"
            ],
            "properties": {
              "bucket_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Buy listing",
        "type": "object",
        "required": [
          "buy_listing"
        ],
        "properties": {
          "buy_listing": {
            "type": "object",
            "required": [
              "bucket_id",
              "listing_id"
            ],
            "properties": {
              "bucket_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw purchased listing",
        "type": "object",
        "required": [
          "withdraw_purchased"
        ],
        "properties": {
          "withdraw_purchased": {
            "type": "object",
            "required": [
              "listing_id"
            ],
            "properties": {
              "listing_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CreateListingMsg": {
        "description": "Must be sent along with message when creating a Listing",
        "type": "object",
        "required": [
          "ask"
        ],
        "properties": {
          "ask": {
            "$ref": "#/definitions/GenericBalance"
          },
          "whitelisted_buyer": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Cw20CoinVerified": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Cw721ReceiveMsg": {
        "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "msg",
          "sender",
          "token_id"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GenericBalance": {
        "type": "object",
        "required": [
          "cw20",
          "native",
          "nfts"
        ],
        "properties": {
          "cw20": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Cw20CoinVerified"
            }
          },
          "native": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "nfts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Nft"
            }
          }
        },
        "additionalProperties": false
      },
      "Nft": {
        "type": "object",
        "required": [
          "contract_address",
          "token_id"
        ],
        "properties": {
          "contract_address": {
            "$ref": "#/definitions/Addr"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Gets the current Fee Denom",
        "type": "object",
        "required": [
          "get_fee_denom"
        ],
        "properties": {
          "get_fee_denom": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets Buckets owned by user - Requires pagination",
        "type": "object",
        "required": [
          "get_buckets"
        ],
        "properties": {
          "get_buckets": {
            "type": "object",
            "required": [
              "bucket_owner",
              "page_num"
            ],
            "properties": {
              "bucket_owner": {
                "type": "string"
              },
              "page_num": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets Listings owned by user - Requires pagination",
        "type": "object",
        "required": [
          "get_listings_by_owner"
        ],
        "properties": {
          "get_listings_by_owner": {
            "type": "object",
            "required": [
              "owner",
              "page_num"
            ],
            "properties": {
              "owner": {
                "type": "string"
              },
              "page_num": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets listings user is whitelisted for",
        "type": "object",
        "required": [
          "get_listings_by_whitelist"
        ],
        "properties": {
          "get_listings_by_whitelist": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets listings for Marketplace - Does not return non-finalized, expired, or already sold listings - Requires pagination",
        "type": "object",
        "required": [
          "get_listings_for_market"
        ],
        "properties": {
          "get_listings_for_market": {
            "type": "object",
            "required": [
              "page_num"
            ],
            "properties": {
              "page_num": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_buckets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultiBucketResponse",
      "type": "object",
      "required": [
        "buckets"
      ],
      "properties": {
        "buckets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/definitions/Bucket"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bucket": {
          "type": "object",
          "required": [
            "funds",
            "owner"
          ],
          "properties": {
            "fee_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "funds": {
              "$ref": "#/definitions/GenericBalance"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native",
            "nfts"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "nfts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Nft"
              }
            }
          },
          "additionalProperties": false
        },
        "Nft": {
          "type": "object",
          "required": [
            "contract_address",
            "token_id"
          ],
          "properties": {
            "contract_address": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_fee_denom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FeeDenomResponse",
      "type": "object",
      "required": [
        "denom",
        "name",
        "next_change"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next_change": {
          "description": "When FeeCycle can be called next",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "get_listings_by_owner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultiListingResponse",
      "type": "object",
      "required": [
        "listings"
      ],
      "properties": {
        "listings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Listing"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native",
            "nfts"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "nfts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Nft"
              }
            }
          },
          "additionalProperties": false
        },
        "Listing": {
          "type": "object",
          "required": [
            "ask",
            "creator",
            "for_sale",
            "id",
            "status"
          ],
          "properties": {
            "ask": {
              "$ref": "#/definitions/GenericBalance"
            },
            "claimant": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "creator": {
              "$ref": "#/definitions/Addr"
            },
            "expiration_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "finalized_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "for_sale": {
              "$ref": "#/definitions/GenericBalance"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "status": {
              "$ref": "#/definitions/Status"
            },
            "whitelisted_buyer": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Nft": {
          "type": "object",
          "required": [
            "contract_address",
            "token_id"
          ],
          "properties": {
            "contract_address": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Status": {
          "type": "string",
          "enum": [
            "being_prepared",
            "finalized_ready",
            "closed"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_listings_by_whitelist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultiListingResponse",
      "type": "object",
      "required": [
        "listings"
      ],
      "properties": {
        "listings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Listing"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native",
            "nfts"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "nfts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Nft"
              }
            }
          },
          "additionalProperties": false
        },
        "Listing": {
          "type": "object",
          "required": [
            "ask",
            "creator",
            "for_sale",
            "id",
            "status"
          ],
          "properties": {
            "ask": {
              "$ref": "#/definitions/GenericBalance"
            },
            "claimant": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "creator": {
              "$ref": "#/definitions/Addr"
            },
            "expiration_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "finalized_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "for_sale": {
              "$ref": "#/definitions/GenericBalance"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "status": {
              "$ref": "#/definitions/Status"
            },
            "whitelisted_buyer": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Nft": {
          "type": "object",
          "required": [
            "contract_address",
            "token_id"
          ],
          "properties": {
            "contract_address": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Status": {
          "type": "string",
          "enum": [
            "being_prepared",
            "finalized_ready",
            "closed"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_listings_for_market": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultiListingResponse",
      "type": "object",
      "required": [
        "listings"
      ],
      "properties": {
        "listings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Listing"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native",
            "nfts"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "nfts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Nft"
              }
            }
          },
          "additionalProperties": false
        },
        "Listing": {
          "type": "object",
          "required": [
            "ask",
            "creator",
            "for_sale",
            "id",
            "status"
          ],
          "properties": {
            "ask": {
              "$ref": "#/definitions/GenericBalance"
            },
            "claimant": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "creator": {
              "$ref": "#/definitions/Addr"
            },
            "expiration_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "finalized_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "for_sale": {
              "$ref": "#/definitions/GenericBalance"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "status": {
              "$ref": "#/definitions/Status"
            },
            "whitelisted_buyer": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Nft": {
          "type": "object",
          "required": [
            "contract_address",
            "token_id"
          ],
          "properties": {
            "contract_address": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Status": {
          "type": "string",
          "enum": [
            "being_prepared",
            "finalized_ready",
            "closed"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
